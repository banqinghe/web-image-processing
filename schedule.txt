# 计划：

2021.1.5  完成需求分析，确定产品的具体功能
2021.1.25 完成整体 UI 的编写，实现文件读写、嵌入 Web 编辑器等主要功能
2021.2.15 完成基本图像处理模块编写，并将其添加到 UI 中
2021.3.15 完成论文初稿

# 记录：

2021.1.3  创建 repo（canvas-image），使用 Vite + React
2021.1.15 完成了 resizable 组件 
2021.1.30 canvas 渲染图片，尺寸自适应
2021.2.9  sobel 和 prewitt 边缘检测模块
2021.2.10 腐蚀，膨胀，反色，模糊，锐化

现在的重点：编辑器（模块的添加、保存）（2-3 d），完善的 UI（持续），PWA 的体现（2-3 d）

完善的 UI：原图对比，回到原图，提示信息


notes: 
Q：如何将 webgl 的内容转化为图片？
A：在 getContext() 的时候添加 options preserveDrawingBuffer: true 即可使用 canvas.toBlob() 或 canvas.toDataURL() 方法获取截图。preserveDrawingBuffer 会使得 clear 画布得动作不会自动发生，也可以用来实现运动轨迹效果，但据说性能不好。

Q: 如何引入模块、使用模块、叠加模块

todo:
- 处理模块叠加的撤销，不紧急
- 编辑器代码安全问题
